# 依赖项：dependencies/
# 核心职责：
#
# 封装可复用的依赖逻辑（避免在每个接口中重复写相同代码）；
# 最常见的场景：获取数据库会话（get_db），确保每个请求独立使用一个会话，用完自动关闭。
#
# 关键文件：dependencies/db.py

# FastAPI中的依赖注入可以简单理解为以下几点：
# 基本概念
# 依赖注入是一种设计模式，允许函数自动获取它所需要的资源，而不需要手动创建或传递这些资源!!!
# 在FastAPI中，通过Depends来声明和使用依赖
# 工作原理
# 声明依赖：使用Depends()声明函数需要的依赖项
# 自动解析：FastAPI自动调用依赖函数并注入返回值
# 传递参数：将依赖的返回值作为参数传递给目标函数

# 常见用途
# 数据库连接：自动获取和关闭数据库会话
# 认证授权：自动验证用户身份和权限
# 配置管理：自动加载应用配置
# 资源共享：避免重复创建相同资源
# 优势
# 代码简洁：减少重复的资源获取代码
# 自动管理：自动处理资源的创建和销毁
# 易于测试：可以轻松替换依赖进行单元测试
# 类型安全：提供完整的类型提示支持